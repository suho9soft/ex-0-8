#include <WiFi.h>
#include "PubSubClient.h"
#include "DHT.h"

// 8개의 릴레이 상태를 저장할 배열
int KimSuHofestadoRele[8];

const char espwifi_ssid[] = "........";
const char espwifi_pass[] = "........";

void espwifi_setup() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(espwifi_ssid, espwifi_pass);
  Serial.println("Conectando a la red Wifi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("");
  Serial.println("Conexión realizada con éxito");
  Serial.print("Dirección IP: ");
  Serial.println(WiFi.localIP());
}

bool conectado;
unsigned long impr_conect_mqtt = 0;
const char espmqtt_broker[] = "io.adafruit.com";
const int espmqtt_port = 1883;
const char espmqtt_user[] = "........";
const char espmqtt_pass[] = "........";
const char espmqtt_clientid[] = "Nombre_identificativo_unico";
WiFiClient espmqtt_wifiClient;
PubSubClient espmqtt_client(espmqtt_wifiClient);
String espmqtt_topic = "";
String espmqtt_msg_str = "";
double espmqtt_msg_number = 0;
char espmqtt_payload[128];

void espmqtt_callback(char* _topic, unsigned char* _payload, unsigned int _payloadlength);

void espmqtt_setup() {
  delay(10);
  randomSeed(micros());
  espmqtt_client.setServer(espmqtt_broker, espmqtt_port);
  espmqtt_client.setCallback(espmqtt_callback);
}

void espmqtt_loop() {
  if (!espmqtt_client.connected()) {
    espmqtt_client.connect(espmqtt_clientid, espmqtt_user, espmqtt_pass);
    if ((millis() - impr_conect_mqtt) >= 1000) {
      Serial.println("Conectando al servidor MQTT");
      impr_conect_mqtt = millis();
    }
    conectado = false;
    // 8개의 릴레이 상태 토픽을 구독
    espmqtt_client.subscribe("KimSuHo/f/estadoRele1");
    espmqtt_client.subscribe("KimSuHo/f/estadoRele2");
    espmqtt_client.subscribe("KimSuHo/f/estadoRele3");
    espmqtt_client.subscribe("KimSuHo/f/estadoRele4");
    espmqtt_client.subscribe("KimSuHo/f/estadoRele5");
    espmqtt_client.subscribe("KimSuHo/f/estadoRele6");
    espmqtt_client.subscribe("KimSuHo/f/estadoRele7");
    espmqtt_client.subscribe("KimSuHo/f/estadoRele8"); // 8번째 릴레이 추가
  }
  if (espmqtt_client.connected()) {
    if (!conectado) {
      Serial.println("Conectado con éxito");
      conectado = true;
    }
    espmqtt_client.loop();
  }
}

double espmqtt_payload2double(unsigned char* _payload, int _length) {
  int i;
  for (i = 0; i < _length && i < 128; i++) {
    espmqtt_payload[i] = _payload[i];
  }
  espmqtt_payload[i] = 0;
  return atof(espmqtt_payload);
}

String espmqtt_payload2string(unsigned char* _payload, int _length) {
  int i;
  for (i = 0; i < _length && i < 128; i++) {
    espmqtt_payload[i] = _payload[i];
  }
  espmqtt_payload[i] = 0;
  return String(espmqtt_payload);
}

DHT dht25(25, DHT11);

unsigned long frecuenciaPubl_ = 0;

void espmqtt_callback(char* _topic, unsigned char* _payload, unsigned int _payloadlength) {
  espmqtt_topic = String(_topic);
  espmqtt_msg_str = espmqtt_payload2string(_payload, _payloadlength);
  espmqtt_msg_number = espmqtt_payload2double(_payload, _payloadlength);

  // 각 토픽에 대한 릴레이 상태 업데이트
  if (espmqtt_topic == "KimSuHo/f/estadoRele1") KimSuHofestadoRele[0] = espmqtt_msg_number;
  if (espmqtt_topic == "KimSuHo/f/estadoRele2") KimSuHofestadoRele[1] = espmqtt_msg_number;
  if (espmqtt_topic == "KimSuHo/f/estadoRele3") KimSuHofestadoRele[2] = espmqtt_msg_number;
  if (espmqtt_topic == "KimSuHo/f/estadoRele4") KimSuHofestadoRele[3] = espmqtt_msg_number;
  if (espmqtt_topic == "KimSuHo/f/estadoRele5") KimSuHofestadoRele[4] = espmqtt_msg_number;
  if (espmqtt_topic == "KimSuHo/f/estadoRele6") KimSuHofestadoRele[5] = espmqtt_msg_number;
  if (espmqtt_topic == "KimSuHo/f/estadoRele7") KimSuHofestadoRele[6] = espmqtt_msg_number;
  if (espmqtt_topic == "KimSuHo/f/estadoRele8") KimSuHofestadoRele[7] = espmqtt_msg_number; // 8번째 릴레이 추가
}

void setup() {
  Serial.begin(115200);
  espwifi_setup();
  espmqtt_setup();
  pinMode(25, INPUT);
  dht25.begin();
  
  // 핀 16부터 23까지 출력 모드로 설정 (8개의 릴레이를 위한 핀)
  pinMode(16, OUTPUT);
  pinMode(17, OUTPUT);
  pinMode(18, OUTPUT);
  pinMode(19, OUTPUT);
  pinMode(21, OUTPUT);
  pinMode(22, OUTPUT);
  pinMode(23, OUTPUT);
  pinMode(32, OUTPUT); // 8번째 릴레이를 위한 핀 추가 (예: 핀 32)
}

void loop() {
  yield();
  espmqtt_loop();
  
  if (millis() - frecuenciaPubl_ > 3000) {
    frecuenciaPubl_ = millis();
    float temperature = dht25.readTemperature();
    Serial.print("현재 온도: ");
    Serial.println(temperature);
    espmqtt_client.publish("KimSuHo/f/temperatura", String(temperature).c_str());
  }

  // 각 릴레이 상태에 따라 핀 제어
  digitalWrite(16, KimSuHofestadoRele[0] ? HIGH : LOW);
  digitalWrite(17, KimSuHofestadoRele[1] ? HIGH : LOW);
  digitalWrite(18, KimSuHofestadoRele[2] ? HIGH : LOW);
  digitalWrite(19, KimSuHofestadoRele[3] ? HIGH : LOW);
  digitalWrite(21, KimSuHofestadoRele[4] ? HIGH : LOW);
  digitalWrite(22, KimSuHofestadoRele[5] ? HIGH : LOW);
  digitalWrite(23, KimSuHofestadoRele[6] ? HIGH : LOW);
  digitalWrite(32, KimSuHofestadoRele[7] ? HIGH : LOW); // 8번째 릴레이 제어
}
